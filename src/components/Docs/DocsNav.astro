---
import useTranslation from '../../locales/useTranslation'

type Heading = {
	text: string
	slug: string
	depth: number
}

let { frontmatter } = Astro.props

const { isFrench } = useTranslation(Astro)
const postsEN = await Astro.glob('../../pages/docs/*.md')
const postsFR = await Astro.glob('../../pages/fr/docs/*.md')

let posts = (isFrench ? postsFR : postsEN).map((post) => ({
	frontmatter: post.frontmatter,
	headings: post.getHeadings(),
	url: post.url,
}))

// Sort by orderData
posts.sort((a, b) => {
	return a.frontmatter.orderData - b.frontmatter.orderData
})

const currentURL = frontmatter.url
---

<script>
	window.onload = function () {
		let load = true
		let ids: string[] = []
		let lastHeading: Element | null | undefined
		const headings = document.querySelectorAll('.content h2')
		const currentPageUL = document.querySelector('nav details[open="page"] ul')

		headings.forEach((item: Element) => {
			ids.push(item.id)
		})

		const callback = (entries: IntersectionObserverEntry[]) => {
			entries.forEach((entry) => {
				//
				// Only care about intersection from top of page
				if (entry.intersectionRect.y < 100) {
					// to prevent selecting random headings on startup
					if (load) return

					let currentIndex = ids.indexOf(entry.target.id)
					currentIndex += entry.isIntersecting ? -1 : 0
					currentIndex = Math.max(0, currentIndex)

					const heading = currentPageUL?.querySelector('.item-' + ids[currentIndex])

					if (heading) {
						lastHeading?.removeAttribute('aria-current')
						heading?.setAttribute('aria-current', 'true')
						lastHeading = heading
					}
				}
			})

			// On first observe, set heading specified in docs URL
			if (load) {
				let heading: Element | null | undefined

				if (location.hash === '') {
					heading = currentPageUL?.firstElementChild
				} else {
					heading = document.querySelector('.headings-item.item-' + location.hash.replace('#', ''))
				}

				heading?.setAttribute('aria-current', 'true')
				lastHeading = heading
				load = false
			}
		}

		const observer = new IntersectionObserver(callback, { rootMargin: '-20px', threshold: 1.0 })
		headings.forEach((h) => observer.observe(h))
	}
</script>

<nav>
	<ul>
		{
			posts.map(({ url, frontmatter, headings }) => (
				<li>
					<details open={currentURL === url && 'page'} aria-current={currentURL === url && 'page'}>
						<summary>
							<a href={url}>{frontmatter.title}</a>
							<div class='summary-marker'>
								<span>
									<img src='/misc/triangle.svg' width='10' height='10' alt='' />
								</span>
							</div>
						</summary>

						<ul class='headings-list'>
							{headings.map(
								({ text, slug, depth }: Heading) =>
									depth === 2 && (
										<li class={'headings-item item-' + slug}>
											<a href={url + '#' + slug}>{text}</a>
										</li>
									)
							)}
						</ul>
					</details>
				</li>
			))
		}
	</ul>
</nav>

<style>
	nav {
		min-width: 15em;
		font-size: 14px;
		line-height: 1.7em;
		list-style: outside;
	}

	nav > ul {
		position: sticky;
		display: flex;
		top: 4em;
		gap: 1em;
		margin: 0 auto;
		padding: 3px;
		max-width: 300px;
		max-height: calc(100vh - 8em);
		flex-direction: column;
		font-weight: 400;
		list-style: none;
		overflow-y: auto;
	}

	nav summary {
		cursor: pointer;
		user-select: none;
		list-style: none;
		display: flex;
		align-items: center;
		justify-content: space-between;
	}

	nav summary a:hover {
		background-color: #fff1;
	}

	nav a {
		display: block;
		width: 100%;
		padding: 0.3em 1em;
		border: 1px solid transparent;
	}

	nav details .summary-marker {
		text-align: center;
		width: 4em;
		height: 1.8em;
		line-height: 1.8em;
		border-radius: 4px;
		border: 1px solid transparent;
	}

	nav details .summary-marker:hover {
		border-color: #fff1;
		background-color: #fff1;
	}

	details .summary-marker span {
		display: inline-block;
		transform: rotate(-90deg);
	}

	details[open] .summary-marker span {
		transform: rotate(-180deg);
	}

	ul.headings-list {
		font-weight: 200;
		list-style: none;
		padding-left: 0;
	}

	ul.headings-list li:hover,
	ul.headings-list li[aria-current='true'] {
		opacity: 1;
		border-color: #fff1;
		background-color: #fff1;
	}

	ul.headings-list li a {
		opacity: 0.8;
	}

	nav > ul::-webkit-scrollbar {
		height: 4px;
		width: 4px;
		background: transparent;
	}

	nav > ul::-webkit-scrollbar-thumb {
		background: #555;
		border-radius: 2px;
	}

	nav > ul::-webkit-scrollbar-corner {
		background: transparent;
	}
</style>
