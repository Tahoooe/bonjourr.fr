---
import Layout from './Layout.astro'
import DocsHero from '../components/Docs/DocsHero.astro'
import DocsNav from '../components/Docs/DocsNav.astro'

const { frontmatter } = Astro.props
---

<script>
	window.onload = function () {
		let load = true
		let headingsList: string[] = []
		const allItems = document.querySelectorAll('.headings-item')

		// add headings ids to the list
		document.querySelectorAll('.content h2, .content h3').forEach((item: Element) => headingsList.push(item.id))

		const callback = (entries: IntersectionObserverEntry[]) => {
			entries.forEach((entry) => {
				//
				// Only care about intersection from top of page
				if (entry.intersectionRect.y < 100) {
					// to prevent selecting random headings on startup
					if (load) return

					// id to index, if intersecting is true it means we're going up
					// therefore activate the heading above, index - 1
					const currentIndex = headingsList.indexOf(entry.target.id) + (entry.isIntersecting ? -1 : 0)

					// sets all aria-current
					allItems.forEach((li) => {
						li.classList.contains('item-' + headingsList[currentIndex])
							? li.setAttribute('aria-current', 'true')
							: li.removeAttribute('aria-current')
					})
				}
			})

			if (load) {
				// On first observe, set heading specified in docs URL
				const locationHeading = document.querySelector('.headings-item.item-' + location.hash.replace('#', ''))
				locationHeading?.setAttribute('aria-current', 'true')
				load = false
			}
		}

		const observer = new IntersectionObserver(callback, {
			root: null,
			rootMargin: '-30px',
			threshold: 1.0,
		})

		document.querySelectorAll('.content h2, .content h3').forEach((h) => {
			observer.observe(h)
		})
	}
</script>

<Layout title={frontmatter.title + " Â· Bonjourr's documentation"}>
	<div id='gradient-background'></div>

	<DocsHero src={frontmatter.featured} title={frontmatter.title} />

	<article class={frontmatter.slug}>
		<DocsNav frontmatter={frontmatter} />

		<div class='content'>
			<slot />
		</div>
	</article>
</Layout>

<style is:global lang='scss'>
	#gradient-background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		z-index: -1;
		background: linear-gradient(#323235, #222225);
	}

	code {
		border-radius: 3px;
		padding: 2px 10px;
		font-size: 14px;
		font-weight: normal;
		color: #eee;
		background-color: #444;
		overflow-wrap: break-word;
	}

	pre {
		tab-size: 1.5em;
		padding: 1.5em;
		border-radius: 0.5em;
		border: 1px solid #fff1;
	}

	article.profiles pre {
		white-space: normal;
	}

	pre > code {
		background-color: transparent;
	}

	article {
		position: relative;
		display: flex;
		margin: auto;
		justify-content: center;
		padding: 4em 2em 14em 2em;
		min-height: calc(70vh - 18em);
		font-size: 16px;
		gap: 4em;
	}

	.content {
		padding-bottom: 5em;
		max-width: 700px;
		min-width: 360px;
		width: 100%;

		h2,
		h3,
		h4,
		h5,
		h6 {
			margin: 0 0 0.5em 0;
			font-weight: 500;

			&:first-child {
				padding-top: 0;
			}
		}

		h2 {
			padding-top: 2.2em;
			font-size: 1.8em;
		}

		h3 {
			padding-top: 1.5em;
		}

		li {
			margin: 0.5em 0;
		}

		p,
		ul,
		code {
			margin-bottom: 1em;
			line-height: 1.5em;
			color: #e7e6ea;
		}

		strong {
			font-weight: 500;
		}

		img {
			width: 100%;
		}

		a {
			color: #4395f9;

			&:hover {
				text-decoration: underline;
			}
		}
	}

	table {
		width: 800px;
		max-width: 100%;
		border-collapse: collapse;
		word-break: break-word;

		th {
			padding: 1em;
			text-align: left;
		}

		td {
			padding: 1em;
			border: 1px solid #ccc;
			max-width: 500px;

			@media (prefers-color-scheme: dark) {
				border-color: #666;
			}
		}
	}

	@media only screen and (max-width: 700px) {
		article {
			flex-direction: column;
		}

		.content {
			min-width: 100%;
		}
	}

	@media only screen and (max-width: 500px) {
		.content h2 {
			font-size: 1.5em;
		}

		article {
			padding-bottom: 4em;
		}
	}
</style>
