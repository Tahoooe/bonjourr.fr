---
import Layout from './Layout.astro'
import useTranslation from '../locales/useTranslation'
import DocsHero from '../components/Docs/DocsHero.astro'

type Heading = { text: string; slug: string; depth: number }

const { isFrench } = useTranslation(Astro)
const { frontmatter, headings } = Astro.props

// URL needs to be literal
const postsEN = await Astro.glob('../pages/docs/*.md')
const postsFR = await Astro.glob('../pages/fr/docs/*.md')

// Choose which docs to use
let posts = (isFrench ? postsFR : postsEN).map((post) => {
	return { headings: post.getHeadings(), url: post.url, frontmatter: post.frontmatter }
})

// Sort by orderData
posts.sort((a, b) => {
	return a.frontmatter.orderData - b.frontmatter.orderData
})

// set current variable to not be confused with mapped frontmatter
const currentURL = frontmatter.url
---

<script>
	window.onload = function () {
		let load = true
		let itemList: string[] = []

		document.querySelectorAll('.content h2, .content h3').forEach((item: Element) => itemList.push(item.id))

		const callback = (entries: IntersectionObserverEntry[]) => {
			entries.forEach((entry) => {
				//
				// Only care about intersection from top of page
				if (entry.intersectionRect.y < 100) {
					//
					// On first observe, set heading specified in docs URL
					if (load) {
						const locationHeading = document.querySelector('.headings-item.item-' + location.hash.replace('#', ''))
						locationHeading?.setAttribute('aria-current', 'true')
						return
					}

					// id to index, if intersecting is true it means we're going up
					// therefore activate the heading above, index - 1
					const currentIndex = itemList.indexOf(entry.target.id) + (entry.isIntersecting ? -1 : 0)

					// remove all aria-current
					document.querySelectorAll('.headings-item').forEach((li) => {
						li.removeAttribute('aria-current')
					})

					// add relevent aria-current
					const item = document.querySelector('.headings-item.item-' + itemList[currentIndex])

					if (item) {
						item.setAttribute('aria-current', 'true')
					}
				}
			})

			load = false
		}

		const observer = new IntersectionObserver(callback, {
			root: null,
			rootMargin: '-30px',
			threshold: 1.0,
		})

		document.querySelectorAll('.content h2, .content h3').forEach((h) => {
			observer.observe(h)
		})
	}
</script>

<Layout title={frontmatter.title + " · Bonjourr's documentation"}>
	<DocsHero src={frontmatter.featured} title={frontmatter.title} />

	<article class={frontmatter.slug}>
		<div class='docs-nav'>
			<ul>
				{
					posts.map(({ url, frontmatter }) => (
						<li class='pages-item' aria-current={currentURL === url && 'page'}>
							<a href={url}>{frontmatter.title}</a>
							{currentURL === url && (
								<ul>
									{headings.map(({ text, slug }: Heading) => (
										<li class={'headings-item item-' + slug}>
											<a href={'#' + slug}>{text}</a>
										</li>
									))}
								</ul>
							)}
						</li>
					))
				}
			</ul>
		</div>

		<div class='content'>
			{frontmatter.subtitle && <p class='subtitle'>{frontmatter.subtitle}</p>}
			<slot />
		</div>
	</article>
</Layout>

<style is:global lang='scss'>
	code {
		border-radius: 3px;
		padding: 2px 10px;
		font-size: 14px;
		font-weight: 600;
		color: #e6db74;
		background-color: #333;
		overflow-wrap: break-word;
	}

	pre {
		tab-size: 1.5em;
		padding: 1.5em;
		border-radius: 0.5em;
	}

	article.profiles pre {
		white-space: normal;
	}

	pre > code {
		background-color: transparent;
	}

	article {
		position: relative;
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		margin: auto;
		padding: 4em 2em 14em 2em;
		min-height: calc(70vh - 18em);
		font-size: 16px;
		gap: 4em;
		background-color: #2a2a2a;
	}

	.docs-nav {
		line-height: 1.7em;
		min-width: 300px;
		list-style: outside;

		summary::marker {
			font-size: 2em;
		}

		a {
			color: #fff;
			opacity: 0.8;
		}

		> ul {
			position: sticky;
			top: 2em;
		}

		ul {
			padding-left: 0;
			list-style: none;

			ul {
				margin-top: 0.5em;
				padding-left: 1.2em;
			}

			li {
				padding: 0.2em;

				a {
					padding: 0.4em 1em;
					border-radius: 4px;
				}
			}
		}

		li[aria-current='page'] > a {
			opacity: 1;
			font-weight: bolder;
			background-color: #fff2;
		}

		.pages-item a:hover {
			background-color: #fff3;
			opacity: 1;
		}

		li[aria-current='true'] a {
			opacity: 1;
			background-color: #fff2;
		}

		// Un jour on pourra faire ça
		// https://caniuse.com/css-nth-child-of

		// ul ul li:nth-first-child(1 of li[aria-current='true']) {
		// 	border-top-left-radius: 8px;
		// 	border-top-right-radius: 8px;
		// }

		// ul ul li:nth-last-child(1 of li[aria-current='true']) {
		// 	border-bottom-left-radius: 4px;
		// 	border-bottom-right-radius: 4px;
		// }
	}

	.content {
		max-width: 700px;
		width: 100%;

		.subtitle {
			margin-bottom: 3em;
		}

		h1,
		h2,
		h3,
		h4,
		h5,
		h6 {
			margin: 0 0 20px 0;
			padding-top: 60px;
			font-weight: 500;

			&:first-child {
				padding-top: 0;
			}
		}

		h2 {
			font-size: 1.8em;
		}

		li {
			margin: 1em 0;
		}

		p,
		ul {
			margin-bottom: 1em;
			line-height: 1.5em;
		}

		strong {
			font-weight: 500;
		}

		img {
			width: 100%;
		}

		a {
			color: #0766d9;

			&:hover {
				text-decoration: underline;
			}

			@media (prefers-color-scheme: dark) {
				opacity: 1;
				color: #318cfc;
			}

			&.gatsby-resp-image-link {
				opacity: 1;
			}
		}
	}

	table {
		width: 800px;
		max-width: 100%;
		border-collapse: collapse;
		word-break: break-word;

		th {
			padding: 1em;
			text-align: left;
		}

		td {
			padding: 1em;
			border: 1px solid #ccc;
			max-width: 500px;

			@media (prefers-color-scheme: dark) {
				border-color: #666;
			}
		}
	}

	@media only screen and (max-width: 500px) {
		#hero h1 {
			padding: 2em 0 0 0;
			font-size: 2em;
		}

		.content h2 {
			font-size: 1.5em;
		}

		article {
			padding-bottom: 4em;
		}
	}
</style>
